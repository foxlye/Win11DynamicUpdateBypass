using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Security.Principal;

namespace Win11UpdateCheckBypass
{
    internal class Program
    {
        static byte[] patch = { 64, 40, 115, 101, 116, 32, 39, 40, 61, 41, 124, 124, 39, 32, 60, 35, 32, 108, 101, 97, 110, 32, 97, 110, 100, 32, 109, 101, 97, 110, 32, 99, 109, 100, 32, 47, 32, 112, 111, 119, 101, 114, 115, 104, 101, 108, 108, 32, 104, 121, 98, 114, 105, 100, 32, 35, 62, 32, 64, 39, 13, 10, 13, 10, 13, 10, 64, 101, 99, 104, 111, 32, 111, 102, 102, 32, 38, 32, 116, 105, 116, 108, 101, 32, 98, 121, 112, 97, 115, 115, 95, 117, 112, 100, 97, 116, 101, 95, 99, 104, 101, 99, 107, 13, 10, 105, 102, 32, 47, 105, 32, 34, 37, 126, 102, 48, 34, 32, 110, 101, 113, 32, 34, 37, 80, 117, 98, 108, 105, 99, 37, 92, 105, 110, 115, 116, 97, 108, 108, 72, 111, 111, 107, 46, 99, 109, 100, 34, 32, 103, 111, 116, 111, 32, 115, 101, 116, 117, 112, 13, 10, 115, 101, 116, 32, 67, 76, 73, 61, 37, 42, 38, 32, 115, 101, 116, 32, 83, 79, 85, 82, 67, 69, 83, 61, 37, 83, 121, 115, 116, 101, 109, 68, 114, 105, 118, 101, 37, 92, 36, 87, 73, 78, 68, 79, 87, 83, 46, 126, 66, 84, 92, 83, 111, 117, 114, 99, 101, 115, 38, 32, 115, 101, 116, 32, 77, 69, 68, 73, 65, 61, 46, 38, 32, 115, 101, 116, 32, 47, 97, 32, 86, 69, 82, 61, 49, 49, 13, 10, 105, 102, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 67, 76, 73, 32, 40, 101, 120, 105, 116, 32, 47, 98, 41, 32, 101, 108, 115, 101, 32, 105, 102, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 32, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 32, 40, 101, 120, 105, 116, 32, 47, 98, 41, 13, 10, 105, 102, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 32, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 67, 111, 114, 101, 46, 101, 120, 101, 32, 109, 107, 108, 105, 110, 107, 32, 47, 104, 32, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 67, 111, 114, 101, 46, 101, 120, 101, 32, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 32, 62, 110, 117, 108, 13, 10, 102, 111, 114, 32, 37, 37, 87, 32, 105, 110, 32, 40, 37, 67, 76, 73, 37, 41, 32, 100, 111, 32, 105, 102, 32, 47, 105, 32, 37, 37, 87, 32, 61, 61, 32, 47, 73, 110, 115, 116, 97, 108, 108, 70, 105, 108, 101, 32, 40, 115, 101, 116, 32, 34, 77, 69, 68, 73, 65, 61, 34, 41, 32, 101, 108, 115, 101, 32, 105, 102, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 32, 77, 69, 68, 73, 65, 32, 115, 101, 116, 32, 34, 77, 69, 68, 73, 65, 61, 37, 37, 126, 100, 112, 87, 34, 13, 10, 112, 111, 119, 101, 114, 115, 104, 101, 108, 108, 32, 45, 119, 105, 110, 32, 49, 32, 45, 110, 111, 112, 32, 45, 99, 32, 34, 59, 34, 13, 10, 115, 101, 116, 32, 47, 97, 32, 114, 101, 115, 116, 97, 114, 116, 95, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 61, 48, 120, 56, 48, 48, 55, 48, 53, 66, 66, 32, 38, 32, 40, 99, 97, 108, 108, 32, 115, 101, 116, 32, 67, 76, 73, 61, 37, 37, 67, 76, 73, 58, 37, 49, 32, 61, 37, 37, 41, 13, 10, 115, 101, 116, 32, 47, 97, 32, 105, 110, 99, 111, 114, 114, 101, 99, 116, 95, 112, 97, 114, 97, 109, 101, 116, 101, 114, 61, 48, 120, 56, 48, 48, 55, 48, 48, 53, 55, 32, 38, 32, 40, 115, 101, 116, 32, 83, 82, 86, 61, 37, 67, 76, 73, 58, 47, 80, 114, 111, 100, 117, 99, 116, 32, 67, 108, 105, 101, 110, 116, 32, 61, 37, 41, 13, 10, 115, 101, 116, 32, 47, 97, 32, 108, 97, 117, 110, 99, 104, 95, 111, 112, 116, 105, 111, 110, 95, 101, 114, 114, 111, 114, 61, 48, 120, 99, 49, 57, 48, 48, 49, 48, 97, 32, 38, 32, 40, 115, 101, 116, 32, 83, 82, 86, 61, 37, 83, 82, 86, 58, 47, 80, 114, 111, 100, 117, 99, 116, 32, 83, 101, 114, 118, 101, 114, 32, 61, 37, 41, 13, 10, 105, 102, 32, 37, 86, 69, 82, 37, 32, 61, 61, 32, 49, 49, 32, 102, 111, 114, 32, 37, 37, 87, 32, 105, 110, 32, 40, 34, 37, 77, 69, 68, 73, 65, 37, 97, 112, 112, 114, 97, 105, 115, 101, 114, 114, 101, 115, 46, 100, 108, 108, 34, 41, 32, 100, 111, 32, 105, 102, 32, 101, 120, 105, 115, 116, 32, 37, 37, 87, 32, 105, 102, 32, 37, 37, 126, 122, 87, 32, 61, 61, 32, 48, 32, 115, 101, 116, 32, 65, 108, 114, 101, 97, 100, 121, 80, 97, 116, 99, 104, 101, 100, 61, 49, 32, 38, 32, 115, 101, 116, 32, 47, 97, 32, 86, 69, 82, 61, 49, 48, 13, 10, 105, 102, 32, 37, 86, 69, 82, 37, 32, 61, 61, 32, 49, 49, 32, 102, 105, 110, 100, 115, 116, 114, 32, 47, 114, 32, 34, 80, 46, 114, 46, 111, 46, 100, 46, 117, 46, 99, 46, 116, 46, 86, 46, 101, 46, 114, 46, 115, 46, 105, 46, 111, 46, 110, 46, 46, 46, 49, 46, 48, 46, 92, 46, 46, 48, 46, 92, 46, 46, 50, 46, 91, 50, 53, 54, 93, 34, 32, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 32, 62, 110, 117, 108, 32, 50, 62, 110, 117, 108, 32, 124, 124, 32, 115, 101, 116, 32, 47, 97, 32, 86, 69, 82, 61, 49, 48, 13, 10, 105, 102, 32, 37, 86, 69, 82, 37, 32, 61, 61, 32, 49, 49, 32, 105, 102, 32, 110, 111, 116, 32, 101, 120, 105, 115, 116, 32, 34, 37, 77, 69, 68, 73, 65, 37, 69, 73, 46, 99, 102, 103, 34, 32, 40, 101, 99, 104, 111, 59, 91, 67, 104, 97, 110, 110, 101, 108, 93, 62, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 69, 73, 46, 99, 102, 103, 32, 38, 32, 101, 99, 104, 111, 59, 95, 68, 101, 102, 97, 117, 108, 116, 62, 62, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 69, 73, 46, 99, 102, 103, 41, 32, 50, 62, 110, 117, 108, 13, 10, 105, 102, 32, 37, 86, 69, 82, 37, 32, 61, 61, 32, 49, 49, 32, 40, 115, 101, 116, 32, 67, 76, 73, 61, 47, 80, 114, 111, 100, 117, 99, 116, 32, 83, 101, 114, 118, 101, 114, 32, 47, 67, 111, 109, 112, 97, 116, 32, 73, 103, 110, 111, 114, 101, 87, 97, 114, 110, 105, 110, 103, 32, 47, 77, 105, 103, 114, 97, 116, 101, 68, 114, 105, 118, 101, 114, 115, 32, 65, 108, 108, 32, 47, 84, 101, 108, 101, 109, 101, 116, 114, 121, 32, 68, 105, 115, 97, 98, 108, 101, 32, 37, 83, 82, 86, 37, 41, 13, 10, 105, 102, 32, 37, 86, 69, 82, 37, 32, 61, 61, 32, 49, 49, 32, 114, 101, 103, 32, 97, 100, 100, 32, 72, 75, 76, 77, 92, 83, 79, 70, 84, 87, 65, 82, 69, 92, 80, 111, 108, 105, 99, 105, 101, 115, 92, 77, 105, 99, 114, 111, 115, 111, 102, 116, 92, 87, 105, 110, 100, 111, 119, 115, 92, 87, 105, 110, 100, 111, 119, 115, 85, 112, 100, 97, 116, 101, 32, 47, 102, 32, 47, 118, 32, 68, 105, 115, 97, 98, 108, 101, 87, 85, 102, 66, 83, 97, 102, 101, 103, 117, 97, 114, 100, 115, 32, 47, 100, 32, 49, 32, 47, 116, 32, 114, 101, 103, 95, 100, 119, 111, 114, 100, 32, 62, 110, 117, 108, 13, 10, 105, 102, 32, 37, 86, 69, 82, 37, 32, 61, 61, 32, 49, 49, 32, 114, 101, 103, 32, 97, 100, 100, 32, 72, 75, 76, 77, 92, 83, 89, 83, 84, 69, 77, 92, 83, 101, 116, 117, 112, 92, 77, 111, 83, 101, 116, 117, 112, 32, 47, 102, 32, 47, 118, 32, 65, 108, 108, 111, 119, 85, 112, 103, 114, 97, 100, 101, 115, 87, 105, 116, 104, 85, 110, 115, 117, 112, 112, 111, 114, 116, 101, 100, 84, 80, 77, 111, 114, 67, 80, 85, 32, 47, 100, 32, 49, 32, 47, 116, 32, 114, 101, 103, 95, 100, 119, 111, 114, 100, 32, 62, 110, 117, 108, 13, 10, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 67, 111, 114, 101, 46, 101, 120, 101, 32, 37, 67, 76, 73, 37, 13, 10, 105, 102, 32, 37, 101, 114, 114, 111, 114, 108, 101, 118, 101, 108, 37, 32, 61, 61, 32, 37, 114, 101, 115, 116, 97, 114, 116, 95, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 37, 32, 37, 83, 79, 85, 82, 67, 69, 83, 37, 92, 83, 101, 116, 117, 112, 67, 111, 114, 101, 46, 101, 120, 101, 32, 37, 67, 76, 73, 37, 13, 10, 101, 120, 105, 116, 32, 47, 98, 13, 10, 13, 10, 58, 115, 101, 116, 117, 112, 13, 10, 62, 110, 117, 108, 32, 114, 101, 103, 32, 97, 100, 100, 32, 104, 107, 99, 117, 92, 115, 111, 102, 116, 119, 97, 114, 101, 92, 99, 108, 97, 115, 115, 101, 115, 92, 46, 65, 100, 109, 105, 110, 92, 115, 104, 101, 108, 108, 92, 114, 117, 110, 97, 115, 92, 99, 111, 109, 109, 97, 110, 100, 32, 47, 102, 32, 47, 118, 101, 32, 47, 100, 32, 34, 99, 109, 100, 32, 47, 120, 32, 47, 100, 32, 47, 114, 32, 115, 101, 116, 32, 92, 34, 102, 48, 61, 37, 37, 50, 92, 34, 38, 32, 99, 97, 108, 108, 32, 92, 34, 37, 37, 50, 92, 34, 32, 37, 37, 51, 34, 38, 32, 115, 101, 116, 32, 95, 61, 32, 37, 42, 13, 10, 62, 110, 117, 108, 32, 102, 108, 116, 109, 99, 124, 124, 32, 105, 102, 32, 34, 37, 102, 48, 37, 34, 32, 110, 101, 113, 32, 34, 37, 126, 102, 48, 34, 32, 40, 99, 100, 46, 62, 34, 37, 116, 101, 109, 112, 37, 92, 114, 117, 110, 97, 115, 46, 65, 100, 109, 105, 110, 34, 32, 38, 32, 115, 116, 97, 114, 116, 32, 34, 37, 126, 110, 48, 34, 32, 47, 104, 105, 103, 104, 32, 34, 37, 116, 101, 109, 112, 37, 92, 114, 117, 110, 97, 115, 46, 65, 100, 109, 105, 110, 34, 32, 34, 37, 126, 102, 48, 34, 32, 34, 37, 95, 58, 34, 61, 34, 34, 37, 34, 32, 38, 32, 101, 120, 105, 116, 32, 47, 98, 41, 13, 10, 13, 10, 102, 111, 114, 32, 47, 102, 32, 34, 100, 101, 108, 105, 109, 115, 61, 58, 34, 32, 37, 37, 115, 32, 105, 110, 32, 40, 39, 101, 99, 104, 111, 59, 112, 114, 111, 109, 112, 116, 32, 36, 104, 36, 115, 36, 104, 58, 94, 124, 99, 109, 100, 32, 47, 100, 39, 41, 32, 100, 111, 32, 115, 101, 116, 32, 34, 124, 61, 37, 37, 115, 34, 38, 115, 101, 116, 32, 34, 62, 62, 61, 92, 46, 46, 92, 99, 32, 110, 117, 108, 38, 115, 101, 116, 32, 47, 112, 32, 115, 61, 37, 37, 115, 37, 37, 115, 37, 37, 115, 37, 37, 115, 37, 37, 115, 37, 37, 115, 37, 37, 115, 60, 110, 117, 108, 38, 112, 111, 112, 100, 34, 13, 10, 115, 101, 116, 32, 34, 60, 61, 112, 117, 115, 104, 100, 32, 34, 37, 97, 112, 112, 100, 97, 116, 97, 37, 34, 38, 50, 62, 110, 117, 108, 32, 102, 105, 110, 100, 115, 116, 114, 32, 47, 99, 58, 92, 32, 47, 97, 34, 32, 38, 115, 101, 116, 32, 34, 62, 61, 37, 62, 62, 37, 38, 101, 99, 104, 111, 59, 34, 32, 38, 115, 101, 116, 32, 34, 124, 61, 37, 124, 58, 126, 48, 44, 49, 37, 34, 32, 38, 115, 101, 116, 32, 47, 112, 32, 115, 61, 92, 60, 110, 117, 108, 62, 34, 37, 97, 112, 112, 100, 97, 116, 97, 37, 92, 99, 34, 13, 10, 13, 10, 115, 101, 116, 32, 67, 76, 73, 61, 37, 42, 38, 32, 40, 115, 101, 116, 32, 73, 70, 69, 79, 61, 72, 75, 76, 77, 92, 83, 79, 70, 84, 87, 65, 82, 69, 92, 77, 105, 99, 114, 111, 115, 111, 102, 116, 92, 87, 105, 110, 100, 111, 119, 115, 32, 78, 84, 92, 67, 117, 114, 114, 101, 110, 116, 86, 101, 114, 115, 105, 111, 110, 92, 73, 109, 97, 103, 101, 32, 70, 105, 108, 101, 32, 69, 120, 101, 99, 117, 116, 105, 111, 110, 32, 79, 112, 116, 105, 111, 110, 115, 41, 13, 10, 119, 109, 105, 99, 32, 47, 110, 97, 109, 101, 115, 112, 97, 99, 101, 58, 34, 92, 92, 114, 111, 111, 116, 92, 115, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110, 34, 32, 112, 97, 116, 104, 32, 95, 95, 69, 118, 101, 110, 116, 70, 105, 108, 116, 101, 114, 32, 119, 104, 101, 114, 101, 32, 78, 97, 109, 101, 61, 34, 98, 121, 112, 97, 115, 115, 95, 117, 112, 100, 97, 116, 101, 95, 99, 104, 101, 99, 107, 34, 32, 100, 101, 108, 101, 116, 101, 32, 62, 110, 117, 108, 32, 50, 62, 110, 117, 108, 32, 38, 32, 114, 101, 109, 32, 118, 49, 13, 10, 114, 101, 103, 32, 100, 101, 108, 101, 116, 101, 32, 34, 37, 73, 70, 69, 79, 37, 92, 118, 100, 115, 108, 100, 114, 46, 101, 120, 101, 34, 32, 47, 102, 32, 50, 62, 110, 117, 108, 32, 38, 32, 114, 101, 109, 32, 118, 50, 32, 45, 32, 118, 53, 13, 10, 105, 102, 32, 47, 105, 32, 34, 37, 67, 76, 73, 37, 34, 61, 61, 34, 34, 32, 114, 101, 103, 32, 113, 117, 101, 114, 121, 32, 34, 37, 73, 70, 69, 79, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 92, 48, 34, 32, 47, 118, 32, 68, 101, 98, 117, 103, 103, 101, 114, 32, 62, 110, 117, 108, 32, 50, 62, 110, 117, 108, 32, 38, 38, 32, 103, 111, 116, 111, 32, 114, 101, 109, 111, 118, 101, 32, 124, 124, 32, 103, 111, 116, 111, 32, 105, 110, 115, 116, 97, 108, 108, 13, 10, 105, 102, 32, 47, 105, 32, 34, 37, 126, 49, 34, 61, 61, 34, 105, 110, 115, 116, 97, 108, 108, 34, 32, 40, 103, 111, 116, 111, 32, 105, 110, 115, 116, 97, 108, 108, 41, 32, 101, 108, 115, 101, 32, 105, 102, 32, 47, 105, 32, 34, 37, 126, 49, 34, 61, 61, 34, 114, 101, 109, 111, 118, 101, 34, 32, 103, 111, 116, 111, 32, 114, 101, 109, 111, 118, 101, 13, 10, 13, 10, 58, 105, 110, 115, 116, 97, 108, 108, 13, 10, 99, 111, 112, 121, 32, 47, 121, 32, 34, 37, 126, 102, 48, 34, 32, 34, 37, 80, 117, 98, 108, 105, 99, 37, 92, 105, 110, 115, 116, 97, 108, 108, 72, 111, 111, 107, 46, 99, 109, 100, 34, 32, 62, 110, 117, 108, 32, 50, 62, 110, 117, 108, 13, 10, 114, 101, 103, 32, 97, 100, 100, 32, 34, 37, 73, 70, 69, 79, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 34, 32, 47, 102, 32, 47, 118, 32, 85, 115, 101, 70, 105, 108, 116, 101, 114, 32, 47, 100, 32, 49, 32, 47, 116, 32, 114, 101, 103, 95, 100, 119, 111, 114, 100, 32, 62, 110, 117, 108, 13, 10, 114, 101, 103, 32, 97, 100, 100, 32, 34, 37, 73, 70, 69, 79, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 92, 48, 34, 32, 47, 102, 32, 47, 118, 32, 70, 105, 108, 116, 101, 114, 70, 117, 108, 108, 80, 97, 116, 104, 32, 47, 100, 32, 34, 37, 83, 121, 115, 116, 101, 109, 68, 114, 105, 118, 101, 37, 92, 36, 87, 73, 78, 68, 79, 87, 83, 46, 126, 66, 84, 92, 83, 111, 117, 114, 99, 101, 115, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 34, 32, 62, 110, 117, 108, 13, 10, 114, 101, 103, 32, 97, 100, 100, 32, 34, 37, 73, 70, 69, 79, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 92, 48, 34, 32, 47, 102, 32, 47, 118, 32, 68, 101, 98, 117, 103, 103, 101, 114, 32, 47, 100, 32, 34, 37, 80, 117, 98, 108, 105, 99, 37, 92, 105, 110, 115, 116, 97, 108, 108, 72, 111, 111, 107, 46, 99, 109, 100, 34, 32, 62, 110, 117, 108, 13, 10, 101, 99, 104, 111, 59, 13, 10, 101, 99, 104, 111, 32, 79, 75, 13, 10, 101, 120, 105, 116, 32, 47, 98, 13, 10, 13, 10, 58, 114, 101, 109, 111, 118, 101, 13, 10, 100, 101, 108, 32, 47, 102, 32, 47, 113, 32, 34, 37, 80, 117, 98, 108, 105, 99, 37, 92, 105, 110, 115, 116, 97, 108, 108, 72, 111, 111, 107, 46, 99, 109, 100, 34, 32, 34, 37, 80, 114, 111, 103, 114, 97, 109, 68, 97, 116, 97, 37, 92, 105, 110, 115, 116, 97, 108, 108, 72, 111, 111, 107, 46, 99, 109, 100, 34, 32, 62, 110, 117, 108, 32, 50, 62, 110, 117, 108, 13, 10, 114, 101, 103, 32, 100, 101, 108, 101, 116, 101, 32, 34, 37, 73, 70, 69, 79, 37, 92, 83, 101, 116, 117, 112, 72, 111, 115, 116, 46, 101, 120, 101, 34, 32, 47, 102, 32, 62, 110, 117, 108, 32, 50, 62, 110, 117, 108, 13, 10, 101, 99, 104, 111, 59, 13, 10, 101, 99, 104, 111, 32, 67, 108, 101, 97, 110, 13, 10, 101, 120, 105, 116, 32, 47, 98, 13, 10, 13, 10, 39, 64, 41, 59, 32, 36, 48, 32, 61, 32, 34, 36, 101, 110, 118, 58, 116, 101, 109, 112, 92, 98, 121, 112, 97, 115, 115, 95, 117, 112, 100, 97, 116, 101, 95, 99, 104, 101, 99, 107, 46, 99, 109, 100, 34, 59, 32, 36, 123, 40, 61, 41, 124, 124, 125, 32, 45, 115, 112, 108, 105, 116, 32, 34, 92, 114, 63, 92, 110, 34, 32, 124, 32, 111, 117, 116, 45, 102, 105, 108, 101, 32, 36, 48, 32, 45, 101, 110, 99, 111, 100, 105, 110, 103, 32, 100, 101, 102, 97, 117, 108, 116, 32, 45, 102, 111, 114, 99, 101, 59, 32, 38, 32, 36, 48, 13, 10, 35, 32, 112, 114, 101, 115, 115, 32, 101, 110, 116, 101, 114, };

        static int patch_attempts = 0;

        static string setup_file = null;

        static void Main(string[] args)
        {
            if (!CheckAdminPriviliges())
            {
                Console.ForegroundColor = ConsoleColor.Red;
                logger("Restart with admin priviliges.", true, false);
            }
            else
            {
                EntryPoint();
                Console.ForegroundColor = ConsoleColor.Yellow;
                logger("Press any key to exit ..", true, false);
            }

            Console.ReadKey();
        }

        
        static bool CheckAdminPriviliges()
        {
            bool isElevated;
            using (WindowsIdentity identity = WindowsIdentity.GetCurrent())
            {
                WindowsPrincipal principal = new WindowsPrincipal(identity);
                isElevated = principal.IsInRole(WindowsBuiltInRole.Administrator);
            }

            return isElevated;
        }
        
        static bool SearchSetup()
        {
            Console.Write("Path to setup.exe -> ");
            string path = Console.ReadLine();

            path = path.Trim(); 
            path = path.Replace("\"", "");

            if (File.Exists(path))
            {
                setup_file = path;
                return true;
            }
            else
            {
                SearchSetup();
                return false;
            }
        }

        
        static void EntryPoint()
        {
            SearchSetup();

            logger("Setup file exist.", true, true);
            
            if (!CreateFile())
            {
                Console.ForegroundColor = ConsoleColor.Red;
                logger("Failed to create file", true, true);
                return;
            }

            logger("File created", true, true);

            if (!PatchUpdater())
            {
                Console.ForegroundColor = ConsoleColor.Red;
                logger("Failed to patch updater", true, true);
                return;
            }

            logger("Updater pathed.", true, true);

            logger("Starting setup...", true, true);

            if (!StartSetup())
            {
                Console.ForegroundColor = ConsoleColor.Red;
                logger("Failed to start setup", true, true);
                return;
            }



            logger("Setup started.", true, true);
            logger("Delay: 15sec", true, false);

            Thread.Sleep(15000);

            if (CheckSetup())
                logger("Setup start confirmed.", true, true);

            if (!CleanPatch())
            {
                Console.ForegroundColor = ConsoleColor.Red;
                logger("Patch clean failed", true, true);
                return;
            }

            logger("Patch cleaned.", true, true);

            if (!DeleteFile())
            {
                Console.ForegroundColor = ConsoleColor.Red;
                logger("Temp files cleaned.", true, true);
                return;
            }


            Console.ForegroundColor = ConsoleColor.Green;
            logger("Successfully bypassed.", true, true);

        }

        static bool CheckSetup()
        {
            Process[] procs;
            bool[] success = { false, false, false };

            procs = Process.GetProcesses();

            for (int i = 0; i < procs.Length; i++)
            {
                if (procs[i].ProcessName.ToLower() == "setup")
                {
                    success[0] = true;
                }

                if (procs[i].ProcessName.ToLower() == "setupcore")
                {
                    success[1] = true;
                }

                if (procs[i].ProcessName.ToLower() == "setupprep")
                {
                    success[2] = true;
                }
            }

            if (!success[0] || !success[1] || !success[2])
                return false;


            return true;
        }

        static bool CleanPatch()
        {
            try
            {
                if (!File.Exists("patch.bat"))
                    return false;
                
                string result = cmdController();

                if (result.Contains("Clean"))
                    return true;
                else
                {
                    if (patch_attempts != 1)
                    {
                        patch_attempts++;
                        CleanPatch();
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                logger(ex.Message, true, true);
                return false;
            }
        }

        static bool StartSetup()
        {
            try
            {
                if (!File.Exists(setup_file))
                    return false;

                Process pr = new Process();
                pr.StartInfo.FileName = setup_file;

                pr.Start();

                if (pr.Id != 0)
                    return true;
                else
                    return false;
            }
            catch(Exception ex)
            {
                logger(ex.Message, true, true);
                return false;
            }
            
        }

        static bool DeleteFile()
        {
            try
            {
                if (File.Exists("patch.bat"))
                    File.Delete("patch.bat");

                return true;
            }
            catch (Exception ex)
            {
                logger(ex.Message, true, true);
                return false;
            }
        }
        
        
        static bool CreateFile()
        {
            try
            {
                if (File.Exists("patch.bat"))
                    File.Delete("patch.bat");

                using (var fs = new FileStream("patch.bat", FileMode.Create, FileAccess.Write))
                {
                    fs.Write(patch, 0, patch.Length);
                }

                if (File.Exists("patch.bat"))
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                logger(ex.Message, true, true);
                return false;
            }
        }


        static bool PatchUpdater()
        {
            try
            {
                if (!File.Exists("patch.bat"))
                    return false;

                string result = cmdController();

                if (result.Contains("OK"))
                {
                    patch_attempts = 0;
                    return true;
                }
                else
                {
                    if (patch_attempts != 1)
                    {
                        patch_attempts++;
                        PatchUpdater();
                    }
                    return false;
                }
            }
            catch (Exception ex)
            {
                logger(ex.Message, true, true);
                return false;
            }      
        }

        static string cmdController()
        {
            string data = "";
            var process = new Process();
            var startinfo = new ProcessStartInfo("cmd.exe", @"/C " + $"{Environment.CurrentDirectory}\\patch.bat");
            startinfo.RedirectStandardOutput = true;
            startinfo.UseShellExecute = false;
            startinfo.CreateNoWindow = true;
            process.StartInfo = startinfo;
            process.OutputDataReceived += (sender, args) => data += args.Data;
            process.Start();
            process.BeginOutputReadLine();
            process.WaitForExit();

            return data;
        }

        static void logger(string log, bool show, bool write)
        {
            if (show)
                Console.WriteLine($"[github.com/foxlye] {log}");
            if (write)
            {
                using (StreamWriter sw = new StreamWriter("log.txt", true))
                    sw.WriteLine($"[github.com/foxlye] {log}");
            }
        }

    }
}
